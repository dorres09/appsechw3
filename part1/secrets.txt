Part 1

	First of all, it is important to find where secrets are located and replace them with encryption. Found 3 .yaml files that contain mySQL database secrets: /GiftcardSite/k8/django-deploy.yaml, /db/k8/db-deployment.yaml, /db/k8s/db-deployment.yaml

          env:
            - name: MYSQL_ROOT_PASSWORD
              value: thisisatestthing.
              
	Using the following command: echo -n 'thisisatestthing.' | base64 , a password/secret in base64 version is created: dGhpc2lzYXRlc3R0aGluZy4= . Then, created another .yaml file to store the data referencing /GiftcardSite/k8/django-admin-pass-secret.yaml: 
	
	apiVersion: v1
	kind: Secret
	metadata:
    		name: mysql-login-secrets
	type: Opaque
	data:
    		password: dGhpc2lzYXRlc3R0aGluZy4=
    		
	Then, modified 3 .yaml mentioned above as following: 
	
	   env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom: 
              	secretKeyRef:
              		name: mysql-login-secrets
              		key: MYSQL_ROOT_PASSWORD
              		
	Then, run the following command to use it as a variable: kubectl apply -f part1-mysql-secret.yaml
	
	SECRET_KEY is stored in /GiftcardSite/GiftcardSite/settings.py . In order to store the SECRET_KEY in a separate place, Django-environ is used. In requirements.txt, django-environ is added to use the Django library. .env file is created in /GiftcardSite/GiftcardSite directory containing the SECRET_KEY variable. Then, in line 28 of /GiftcardSite/GiftcardSite/settings.py , the following is added to read SECRET_KEY from .env: 
	env = environ.Env()
	environ.Env.read_env()
	SECRET_KEY = env('SECRET_KEY')
	
	Following commands are used: kubectl apply -f django-deploy.yaml , kubectl apply -f db-deployment.yaml , and kubectl delete pods --all . Then, rebuilt Docker container for the Django application. The site is deployed successfully.
